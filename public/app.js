// Generated by CoffeeScript 1.3.3
(function() {
  var S2JApp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  S2JApp = angular.module('S2JApp', []);

  console.log("S2JApp defined", S2JApp);

  /*
  #directives
  S2JApp.directive 'activity', ($scope, $document) ->
  
    #function we will return to the Angular context
    linkFunction = ($scope, $element, $attributes) ->
  
      #attributes that we want to pass when activity is detected
      scopeExpresson = $attributes.activity
  
      #bind the document to clicks and key presses
      $document.mousemove (event) ->
        idleTime = 0
        console.log 'mousemove detected'
        $scope.$apply( scopeExpression )
  
    return linkFunction
  
  #$(this).keypress (e)->
  #  idleTime = 0
  */


  S2JApp.factory('JSONEditor', function() {
    return JSONEditor;
  });

  S2JApp.controller('SqlCtrl', function($scope, $element, $http, JSONEditor) {
    var getSqlResults;
    $scope.sql_data = "";
    $scope.json = {};
    $scope.getSql = function(sql_data) {
      console.log("Get SQL");
      return getSqlResults(sql_data);
    };
    getSqlResults = function(sql_data) {
      var promise, req_params;
      req_params = {
        "sql": sql_data
      };
      promise = $http.post('/raw_sql', req_params);
      return promise.success(function(resp) {
        console.log("Resp", resp);
        return $scope.json = resp;
      });
    };
    /*
      #jsononlineeditor
      container = $element.find($('.result-container'))
      domContainer = container[0]
      #move to service!!
      $scope.ed = new JSONEditor(domContainer, {mode: 'viewer'})
    */

    return $scope.pp = function(json) {
      console.log("PP", json);
      return JSON.stringify(json, void 0, 2);
    };
  });

  S2JApp.controller('ConnectionCtrl', function($scope, $element, $http) {
    return $scope.makeConnection = function() {
      var form_data, form_hdr, promise;
      console.log("Element", $element);
      console.log($element.serialize());
      form_data = $element.serialize();
      console.log("Form Data Connection", form_data);
      form_hdr = {
        'Content-Type': 'application/x-www-form-urlencoded'
      };
      promise = $http.post('/connection', form_data, {
        headers: form_hdr
      });
      return promise.success(function(resp) {
        return console.log("$http Resp", resp);
      });
    };
  });

  S2JApp.controller('DatabasesCtrl', function($scope, $http, $timeout, $document) {
    var DynamicRefresh, checkInterval, idleIncrement, idleTime, refreshChecker;
    $scope.safeApply = function(fn) {
      var phase;
      phase = this.$root.$$phase;
      if (phase === '$apply' || phase === '$digest') {
        if (fn && (typeof fn === 'function')) {
          return fn();
        }
      } else {
        return this.$apply(fn);
      }
    };
    checkInterval = 2000;
    idleTime = -checkInterval;
    idleIncrement = function() {
      return idleTime = idleTime + checkInterval;
    };
    setInterval(idleIncrement, checkInterval);
    $document.find($(".result-container")).on('mousemove', function(event) {
      event.stopPropagation();
    });
    $document.on('mousemove', function(event) {
      return idleTime = 0;
    });
    $document.on('keypress', function(event) {
      return idleTime = 0;
    });
    DynamicRefresh = (function() {

      function DynamicRefresh() {
        this.refreshCheckSecs = __bind(this.refreshCheckSecs, this);

        this.backOff = __bind(this.backOff, this);
        this.activePeriod = 15;
        this.minRequestInterval = 3;
        this.activeRequestInterval = this.activePeriod / 3.0;
      }

      DynamicRefresh.prototype.backOff = function(t) {
        if (t > this.activePeriod) {
          return 2 * t - this.activePeriod;
        } else {
          console.log("WARNING: Refresh rate backoff not working properly");
          return this.activePeriod;
        }
      };

      DynamicRefresh.prototype.refreshCheckSecs = function(idleTime) {
        var idleSecs;
        if (!idleTime) {
          return this.activePeriod;
        }
        idleSecs = idleTime / 1000.0;
        if (idleSecs > this.activePeriod) {
          return this.backOff(idleSecs);
        }
        if (this.activeRequestInterval > this.minRequestInterval) {
          return this.activeRequestInterval;
        }
        return this.minRequestInterval;
      };

      return DynamicRefresh;

    })();
    refreshChecker = (new DynamicRefresh()).refreshCheckSecs;
    $scope.checkDatabases = function() {
      var promise;
      console.log("checking connection");
      promise = $http.get('/databases');
      return promise.success(function(data) {
        return $scope.dbs = data;
      });
    };
    $scope.repeatCheck = function(prevCheck, nextDelay) {
      var current_refresh, thisCheck, timeSinceLastCheck, timeToCheckDbs;
      prevCheck || (prevCheck = 0);
      nextDelay || (nextDelay = 0);
      current_refresh = refreshChecker(idleTime) * 1000;
      if (current_refresh < nextDelay) {
        nextDelay = 0;
      }
      thisCheck = Date.now();
      timeSinceLastCheck = thisCheck - prevCheck;
      timeToCheckDbs = timeSinceLastCheck > nextDelay;
      console.log("timeToCheckDbs", timeToCheckDbs);
      if (timeToCheckDbs) {
        $scope.safeApply($scope.checkDatabases());
        prevCheck = thisCheck;
        nextDelay = refreshChecker(idleTime) * 1000;
      }
      return setTimeout($scope.repeatCheck, checkInterval, prevCheck, nextDelay);
    };
    return $scope.repeatCheck(0);
  });

  angular.bootstrap(document, ["S2JApp"]);

}).call(this);
